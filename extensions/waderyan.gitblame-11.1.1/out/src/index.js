"use strict";var O=Object.defineProperty;var kt=Object.getOwnPropertyDescriptor;var Mt=Object.getOwnPropertyNames;var Dt=Object.prototype.hasOwnProperty;var Nt=(i,t)=>{for(var e in t)O(i,e,{get:t[e],enumerable:!0})},Ot=(i,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of Mt(t))!Dt.call(i,o)&&o!==e&&O(i,o,{get:()=>t[o],enumerable:!(r=kt(t,o))||r.enumerable});return i};var Gt=i=>Ot(O({},"__esModule",{value:!0}),i);var me={};Nt(me,{activate:()=>ae});module.exports=Gt(me);var Rt=require("vscode");var It=require("node:path"),l=require("vscode");var Q=require("vscode"),c=()=>Q.window.activeTextEditor,G="N:-1",$=({document:i,selection:t})=>i.uri.scheme!=="file"?G:`${i.fileName}:${t.active.line}`;var W=require("vscode"),F=(i,t=[])=>Promise.resolve(W.window.showInformationMessage(i,...t)),d=(i,...t)=>Promise.resolve(W.window.showErrorMessage(i,...t));var q=require("vscode"),s=i=>q.workspace.getConfiguration("gitblame").get(i);var K=require("vscode"),$t=1e3,Y=60*$t,X=60*Y,Z=24*X,J=365.25*Z,Wt=J/12,zt=[["year",J],["month",Wt],["day",Z],["hour",X],["minute",Y]],z=(i,t)=>{let e=i.valueOf()-t.valueOf(),r=new Intl.RelativeTimeFormat(K.env.language);for(let[o,n]of zt)if(e>n)return r.format(-1*Math.round(e/n),o);return"right now"};var L=({author:i,committer:t,hash:e,summary:r})=>{let o=new Date,n=({date:N})=>N.toISOString().slice(0,10),m=z(o,i.date),x=z(o,t.date),v=(N,Bt)=>(St="")=>N.substr(0,Number.parseInt(St||Bt,10)),P=s("currentUserAlias");return{"author.mail":i.mail,"author.name":i.isCurrentUser&&P?P:i.name,"author.timestamp":i.timestamp,"author.tz":i.tz,"author.date":n(i),"committer.mail":t.mail,"committer.name":t.isCurrentUser&&P?P:t.name,"committer.timestamp":t.timestamp,"committer.tz":t.tz,"committer.date":n(t),"commit.hash":v(e,"64"),"commit.hash_short":v(e,"7"),"commit.summary":v(r,"65536"),"time.ago":m,"time.c_ago":x}};var Ht=(i,t,e)=>r=>{let o=i.indexOf(r,t);return o===-1||o>e?e:o},jt=(i,t)=>(e,r)=>r===e||t===e?"":i.substring(e+1,r);function _t(i,t,e){let r=t.indexOf("}",e),o=Ht(t,e,r),n=jt(t,r),m=o(","),x=o("|"),v=t.substring(e,Math.min(m,x));return[i[v]??v,n(x,r),n(m,x)]}function*Vt(i,t){let e=0,r=0,o=0;for(let n=0;n<i.length;n++)if(o===0&&i[n]==="$")o=2;else if(o===2&&i[n]==="{")o=1,r=n-1,yield[i.slice(e,r)],e=r;else if(o===2)o=0;else if(o===1){o=0;let m=i.indexOf("}",n);if(m===-1)break;yield _t(t,i,n),e=m+1}yield[i.slice(e)]}var tt=(i,t="")=>t==="u"?i.toUpperCase():t==="l"?i.toLowerCase():t?`${i}|${t}`:i,Qt=i=>i.replace(/\u202e/g,""),y=(i,t)=>{let e="";for(let[r,o,n]of Vt(i,t))typeof r=="string"?e+=tt(r,o):e+=tt(r(n),o);return Qt(e)},et=i=>y(s("statusBarMessageFormat"),L(i)),it=i=>y(s("inlineMessageFormat"),L(i));var p=i=>i?.document.uri.scheme==="file";var u=require("vscode");function w(i,t=!1){if(t&&i==="HEAD")return!0;let e=i.length;return(e===40||e===64)&&/^[a-z0-9]+$/.test(i)}function g(i){let t=i.hash.length;return(t===40||t===64)&&/^0+$/.test(i.hash)}var H=require("node:util"),rt=require("vscode"),a=class i{static instance;out;static getInstance(){return i.instance??=new i,i.instance}constructor(){this.out=rt.window.createOutputChannel("Git Blame",{log:!0})}static error(t){t instanceof Error&&i.getInstance().out.error(t)}static info(t){i.getInstance().out.info(t)}static debug(t,...e){i.getInstance().out.debug((0,H.format)(t,...e))}static trace(t,...e){i.getInstance().out.trace((0,H.format)(t,...e))}dispose(){i.instance=void 0,this.out.dispose()}};var ot="No info about the current line",U=class{statusBar;decorationType;configChange;ongoingViewUpdateRejects=new Set;statusBarText="";statusBarTooltip="";statusBarCommand=!1;statusBarPriority=void 0;constructor(){this.decorationType=u.window.createTextEditorDecorationType({}),this.statusBarPriority=s("statusBarPositionPriority"),this.statusBar=this.createStatusBarItem(),this.configChange=u.workspace.onDidChangeConfiguration(t=>{if(t.affectsConfiguration("gitblame")){let e=s("statusBarPositionPriority");this.statusBarPriority!==e&&(this.statusBarPriority=e,this.statusBar=this.createStatusBarItem())}})}set(t,e,r=!0){t?g(t)?(this.text(s("statusBarMessageNoCommit"),!1,ot),e&&this.createLineDecoration(s("inlineMessageNoCommit"),e,r)):(this.text(et(t),!0),e&&this.createLineDecoration(it(t),e,r)):this.clear()}clear(){this.text("",!1,ot),this.removeLineDecoration()}activity(){this.text("$(extensions-refresh)",!1,"Waiting for git blame response")}fileToLong(){let t=s("maxLineCount");this.text("",!1,`No blame information is available. File has more than ${t} lines`)}dispose(){this.statusBar?.dispose(),this.decorationType.dispose(),this.configChange.dispose()}command(){return{"Open tool URL":"gitblame.online","Open git show":"gitblame.gitShow","Copy hash to clipboard":"gitblame.addCommitHashToClipboard","Show info message":"gitblame.quickInfo"}[s("statusBarMessageClickAction")]}updateStatusBar(t){t.text=this.statusBarText,t.tooltip=this.statusBarTooltip,t.command=this.statusBarCommand?this.command():void 0,a.debug("Updating status bar item with: Text:'%s', tooltip:'git blame%s', command:%s",t.text,t.tooltip,t.command??"")}text(t,e,r=""){let o=e||!r?"":` - ${r}`;this.statusBarText=`$(git-commit) ${t.trimEnd()}`,this.statusBarTooltip=`git blame${o}`,this.statusBarCommand=e,this.updateStatusBar(this.statusBar)}createStatusBarItem(){this.statusBar?.dispose();let t=u.window.createStatusBarItem(u.StatusBarAlignment.Right,this.statusBarPriority);return this.updateStatusBar(t),t.show(),t}async createLineDecoration(t,e,r){if(s("inlineMessageEnabled")&&(this.removeLineDecoration(),r&&await this.delayUpdate(s("delayBlame")))){let o=s("inlineMessageMargin"),n=new u.Position(e.selection.active.line,Number.MAX_SAFE_INTEGER);e.setDecorations?.(this.decorationType,[{renderOptions:{after:{contentText:t,margin:`0 0 0 ${o}rem`,color:new u.ThemeColor("gitblame.inlineMessage")}},range:new u.Range(n,n)}])}}removeLineDecoration(){c()?.setDecorations?.(this.decorationType,[])}preUpdate(t){if(!p(t))return this.clear(),!1;for(let e of this.ongoingViewUpdateRejects)e();return this.ongoingViewUpdateRejects.clear(),this.activity(),!0}async delayUpdate(t){if(t>0)try{return await new Promise((e,r)=>{this.ongoingViewUpdateRejects.add(r),setTimeout(()=>e(!0),t)})}catch{return!1}return!0}};var R=require("node:fs"),wt=require("vscode");var yt=require("node:fs/promises"),xt=require("node:path");var at=require("node:child_process"),mt=require("node:fs/promises"),b=require("node:path"),lt=require("vscode");var nt=require("node:child_process");var st=async(i,t,e={})=>(a.info(`${i} ${t.join(" ")}`),new Promise(r=>(0,nt.execFile)(i,t,{...e,encoding:"utf8"},(o,n,m)=>{o||m?(a.error(o||m),r("")):r(n.trim())})));var h=(i,t=" ")=>{let e=i.indexOf(t[0]);return e===-1?[i,""]:[i.substr(0,e),i.substr(e+1).trim()]};var j=()=>{let i=lt.extensions.getExtension("vscode.git");return i?.exports.enabled?i.exports.getAPI(1).git.path:"git"},f=(i,...t)=>st(j(),t,{cwd:(0,b.dirname)(i),env:{...process.env,LC_ALL:"C"}}),ct=async i=>{let t=c();return p(t)?f(t.document.fileName,"ls-remote","--get-url",i):""},ut=async i=>{let t=c();if(!p(t))return"";let{fileName:e}=t.document,r=await f(e,"symbolic-ref","-q","--short","HEAD"),o=await f(e,"config",`branch.${r}.remote`);return f(e,"config",`remote.${o||i}.url`)},C=async i=>f(i,"rev-parse","--absolute-git-dir"),pt=(i,t)=>{let e=["blame","-C","--incremental","--",i];return s("ignoreWhitespace")&&e.splice(1,0,"-w"),t&&e.splice(1,0,"-S",t),a.info(`${j()} ${e.join(" ")}`),(0,at.spawn)(j(),e,{cwd:(0,b.dirname)(i),stdio:["ignore",null,null],env:{...process.env,LC_ALL:"C",GIT_PAGER:"cat"}})},dt=async i=>{let t=s("revsFile");if(t.length===0)return;let e=await C(i),r=(0,b.dirname)(e);return(await Promise.allSettled(t.map(n=>(0,b.join)(r,n)).map(n=>(0,mt.access)(n).then(()=>n)))).filter(n=>n.status==="fulfilled")[0]?.value},ft=async()=>{let i=c();if(!p(i))return"";let{fileName:t}=i.document;return f(t,"ls-files","--full-name","--",t)},gt=async i=>{let t=c();if(!p(t))return"";let e=await f(t.document.fileName,"rev-parse","--abbrev-ref",`${i}/HEAD`);return h(e,"/")[1]},ht=async i=>{let t=await f((0,b.dirname)(i),"config","user.email");if(t!=="")return`<${t}>`};var qt=i=>({author:{mail:"",name:"",isCurrentUser:!1,timestamp:"",date:new Date,tz:""},committer:{mail:"",name:"",isCurrentUser:!1,timestamp:"",date:new Date,tz:""},hash:i,summary:""}),Kt=i=>({commit:i,filename:""}),Yt=10;async function*Xt(i){let t=0,e=1;for(;t<i.length;){let r=i.indexOf(`
`,t);yield h(i.toString("utf8",t,r)),e%Yt===0&&await new Promise(queueMicrotask),e+=1,t=r+1}}var Zt=(i,t,e,r)=>{t==="time"?(i.timestamp=e,i.date=new Date(Number.parseInt(e,10)*1e3)):t==="tz"?i.tz=e:t==="mail"?(i.mail=e,i.isCurrentUser=r===e):t===""&&(i.name=e)},Jt=(i,t,e,r)=>{let[o,n]=h(i,"-");(o==="author"||o==="committer")&&Zt(e[o],n,t,r)},te=(i,t)=>w(i)&&/^\d+ \d+ \d+$/.test(t),ee=(i,t,e,r)=>{i==="summary"?e.summary=t:w(i)?e.hash=i:(i.startsWith("author")||i.startsWith("committer"))&&Jt(i,t,e,r)};function*ie(i){let[t,e,r]=i.split(" ").map(Number);for(let o=0;o<r;o++)yield{source:t+o,result:e+o}}function*bt(i,t,e){if(!(i===void 0||t===void 0)){e.set(i.commit.hash,i.commit);for(let r of t)yield{...i,line:r}}}async function*vt(i,t,e){let r,o;for await(let[n,m]of Xt(i))te(n,m)&&(r=Kt(e.get(n)??qt(n)),o=ie(m)),r&&(n==="filename"?(r.filename=m,yield*bt(r,o,e)):ee(n,m,r.commit,t));yield*bt(r,o,e)}var E=class{constructor(t){this.fileName=t}store;process;killed=!1;getBlame(){return this.store??=this.blame(),this.store}dispose(){this.process?.kill(),this.killed=!0}async*run(t){let[e,r]=await Promise.all([dt(t),ht(t)]);this.process=pt(t,e),a.debug("Email address for currentUser for file '%s' is '%s'",t,r??"VALUE_NOT_SET_IN_GIT_CONFIG");let o=new Map;for await(let n of this.process?.stdout??[])a.debug("Got chunk from '%s' git blame process. Size: %d",t,n.length),yield*vt(n,r,o);for await(let n of this.process?.stderr??[])if(typeof n=="string")throw new Error(n)}async blame(){let t=new Map,e=await(0,yt.realpath)(this.fileName);try{for await(let r of this.run(e))a.trace("Found blame information for %s:%d: hash:%s",e,r.line.result,r.commit.hash),t.set(r.line.result,r)}catch(r){a.error(r),this.dispose()}if(!this.killed)return(0,xt.relative)(this.fileName,e)?a.info(`Blamed "${e}" (resolved via symlink from "${this.fileName}")`):a.info(`Blamed "${e}"`),t}};var A=class{list=[];storage=new Map;processing=new Set;_maxParallel;constructor(t=2){this.maxParallel=t}add(t){return new Promise(e=>{this.storage.set(t,e),this.processing.size<this.maxParallel?this.startFunction(t):(a.debug("Already running %s in parallel. Adding execution to queue.",this.maxParallel),this.list.push(t))})}updateParallel(t){let e=this.maxParallel;this.maxParallel=t;let r=Math.max(0,this.maxParallel-e);for(let o=0;o<r;o++)this.runNext()}set maxParallel(t){this._maxParallel=t}get maxParallel(){return Math.max(1,Number(this._maxParallel))}startFunction(t){this.processing.add(t);let e=this.storage.get(t);this.storage.delete(t),e&&t().then(e).finally(()=>{this.processing.delete(t),this.runNext()})}runNext(){if(this.processing.size<this.maxParallel){let t=this.list.shift();t&&this.startFunction(t)}}};var I=class{metadata=new WeakMap;files=new Map;fsWatchers=new Map;blameQueue=new A(s("parallelBlames"));configChange;constructor(){this.configChange=wt.workspace.onDidChangeConfiguration(t=>{t.affectsConfiguration("gitblame")&&this.blameQueue.updateParallel(s("parallelBlames"))})}async prepareFile(t){if(this.files.has(t))return;let e=()=>{};this.files.set(t,new Promise(m=>{e=m}));let{file:r,gitRoot:o}=await this.create(t);if(r===void 0){e(void 0);return}a.debug("Setting up file watcher for '%s'",r.fileName),this.fsWatchers.set(r.fileName,(0,R.watch)(r.fileName,{persistent:!1},()=>{a.debug("File watcher callback for '%s' executed",r.fileName),this.remove(r.fileName)}));let n=this.blameQueue.add(()=>r.getBlame());this.metadata.set(n,{file:r,gitRoot:o}),e(n)}async getLine(t,e){await this.prepareFile(t);let r=e+1;return(await this.files.get(t))?.get(r)}removeFromRepository(t){for(let[e,r]of this.files)this.metadata.get(r)?.gitRoot===t&&this.remove(e)}remove(t){let e=this.files.get(t);e&&this.metadata.get(e)?.file?.dispose(),this.files.delete(t),this.fsWatchers.get(t)?.close(),this.fsWatchers.delete(t),a.debug("Cache for '%s' cleared. File watcher closed.",t)}dispose(){for(let t of this.files.keys())this.remove(t);this.configChange.dispose()}async create(t){try{await R.promises.access(t);let e=await C(t);if(e)return{gitRoot:e,file:new E(t)}}catch{}return a.info(`Will not blame '${t}'. Not in a git repository.`),{gitRoot:void 0,file:void 0}}};var Ct=require("node:fs"),S=require("node:path");var B=class{heads=new Map;filesWithFoundHeads=new Set;callback=()=>{};onChange(t){this.callback=t}async addFile(t){if(this.filesWithFoundHeads.has(t))return;this.filesWithFoundHeads.add(t);let e=await C(t),r=this.normalizeWindowsDriveLetter(e);if(this.heads.has(r)===!0||e==="")return;let n=(0,S.resolve)(r,".."),m=(0,S.join)(r,"HEAD");this.heads.set(r,(0,Ct.watch)(m,{persistent:!1},()=>{a.debug("File watcher callback for '%s' called.",m),this.callback({gitRoot:r,repositoryRoot:n})})),a.debug("File watcher for '%s' created.",m)}dispose(){for(let[t,e]of this.heads)e.close(),a.debug("File watcher for HEAD file in git root '%s' closed.",t);this.heads.clear(),this.filesWithFoundHeads.clear(),this.callback=()=>{}}normalizeWindowsDriveLetter(t){return t.length===0?"":t[0].toLowerCase()+t.substr(1)}};var Et=require("node:url"),At=require("vscode");var Tt=require("node:url"),Pt=i=>{let t;try{t=new Tt.URL(i)}catch{return!1}return t.href!==i||t.protocol!=="http:"&&t.protocol!=="https:"?!1:!!(t.hostname&&t.pathname)};var Ft=require("node:url");var _=i=>i.replace(/\.git$/i,""),k=i=>_(i).replace(/^([a-z-]+:\/\/)?([\w%:\\]+?@)?/i,"").replace(/:([a-z_.~+%-][a-z0-9_.~+%-]+)\/?/i,"/$1/");var Lt=i=>{let t=/^(https?):/.exec(i)?.[1],e;try{e=new Ft.URL(`${t??"https"}://${k(i)}`)}catch{return}return e.port=t?e.port:"",e};var Ut=i=>/([a-zA-Z0-9_~%+.-]*?)(\.git)?$/.exec(i)?.[1]??"";var V=(i,t,e="/")=>i.split(e).filter(o=>!!o)[Number(t)]||"invalid-index",re=({hostname:i})=>t=>t===""?i:V(i,t,"."),oe=i=>{if(/^[a-z]+?@/.test(i)){let[,t]=h(i,":");return(e="")=>e===""?`/${t}`:V(t,e)}try{let{pathname:t}=new Et.URL(i);return(e="")=>e===""?t:V(t,e)}catch{return()=>"no-remote-url"}},ne=i=>(s("pluralWebPathSubstrings")??[]).some(t=>i.includes(t)),se=async i=>{let t=s("remoteName"),e=await ct(t);if(e===t)return;let r=k(await ut(t)),o=Lt(r),n=await ft(),m=await gt(t);return{hash:i.commit.hash,"tool.protocol":o?.protocol??"https:","tool.commitpath":`/commit${ne(r)?"s":""}/`,"project.name":Ut(e),"project.remote":r,"project.defaultbranch":m,"gitorigin.hostname":o?re(o):"no-origin-url","gitorigin.path":oe(_(e)),"gitorigin.port":o?.port?`:${o.port}`:"","file.path":n,"file.path.result":n,"file.path.source":i.filename,"file.line":i.line.result.toString(),"file.line.result":i.line.result.toString(),"file.line.source":i.line.source.toString()}},M=async i=>{if(!i||g(i.commit))return;let t=await se(i);if(t===void 0)return;let e=y(s("commitUrl"),t);if(Pt(e))return At.Uri.parse(e,!0);d(`Malformed gitblame.commitUrl: '${e}' from '${s("commitUrl")}'`)};var D=class{disposable;blame;view;headWatcher;constructor(){this.blame=new I,this.view=new U,this.headWatcher=new B,this.disposable=this.setupListeners()}async blameLink(){let t=await this.commit(!0);if(t===void 0)return;let e=await M(t);e?l.commands.executeCommand("vscode.open",e):d("Empty gitblame.commitUrl")}async showMessage(){let t=await this.commit(!1);if(!t||g(t.commit)){this.view.clear();return}let e=y(s("infoMessageFormat"),L(t.commit)),r=await M(t),o=[];r&&o.push({title:"Online",action(){l.commands.executeCommand("vscode.open",r)}}),o.push({title:"Terminal",action:()=>this.runGitShow()}),this.view.set(t.commit,c()),(await F(e,o))?.action()}async copyHash(){let t=await this.commit(!0);t&&!g(t.commit)&&(await l.env.clipboard.writeText(t.commit.hash),F("Copied hash"))}async copyToolUrl(){let t=await this.commit(!0);if(t===void 0)return;let e=await M(t);e?(await l.env.clipboard.writeText(e.toString()),F("Copied tool URL")):d("gitblame.commitUrl config empty")}async runGitShow(){let t=c();if(!p(t))return;let e=await this.commit(!0);if(e===void 0)return;let{hash:r}=e.commit;if(!w(r,!0))return;let o=s("ignoreWhitespace")?"-w ":"",n=l.window.createTerminal({name:`Git Blame: git show ${r}`,iconPath:new l.ThemeIcon("git-commit"),isTransient:!0,cwd:(0,It.dirname)(t.document.fileName)});n.sendText(`git show ${o}${r}; exit 0`,!0),n.show()}async updateView(t=c(),e=!0){if(!this.view.preUpdate(t))return;if(t.document.lineCount>s("maxLineCount")){this.view.fileToLong();return}this.headWatcher.addFile(t.document.fileName);let r=$(t),o=await this.blame.getLine(t.document.fileName,t.selection.active.line),n=c();if(!p(n))return;let m=$(n);(r===m||m===G)&&this.view.set(o?.commit,t,e)}dispose(){this.view.dispose(),this.disposable.dispose(),this.blame.dispose(),this.headWatcher.dispose()}setupListeners(){let t=e=>{let{scheme:r}=e.document.uri;(r==="file"||r==="untitled")&&this.updateView(e)};return this.headWatcher.onChange(({repositoryRoot:e})=>this.blame.removeFromRepository(e)),l.Disposable.from(l.window.onDidChangeActiveTextEditor(e=>{p(e)?(this.view.activity(),this.blame.prepareFile(e.document.fileName),t(e)):this.view.clear()}),l.window.onDidChangeTextEditorSelection(({textEditor:e})=>{t(e)}),l.workspace.onDidSaveTextDocument(()=>{this.updateView()}),l.workspace.onDidCloseTextDocument(e=>{this.blame.remove(e.fileName)}),l.workspace.onDidChangeTextDocument(({document:e})=>{let r=c();r?.document===e&&this.updateView(r,!1)}))}async commit(t){let e=c();if(!p(e)){d("Unable to blame current line. Active view is not a file on disk.");return}if(e.document.lineCount>s("maxLineCount")){d("Git Blame is disabled for the current file"),this.view.fileToLong();return}t||this.view.activity(),this.headWatcher.addFile(e.document.fileName);let r=await this.blame.getLine(e.document.fileName,e.selection.active.line);return r||d("Unable to blame current line. Unable to get blame information for line."),r}};var T=(i,t)=>Rt.commands.registerCommand(`gitblame.${i}`,t),ae=i=>{let t=new D;i.subscriptions.push(t,a.getInstance(),T("quickInfo",()=>{t.showMessage()}),T("online",()=>{t.blameLink()}),T("addCommitHashToClipboard",()=>{t.copyHash()}),T("addToolUrlToClipboard",()=>{t.copyToolUrl()}),T("gitShow",()=>{t.runGitShow()})),t.updateView()};
